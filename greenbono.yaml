# GBO-Aku https://www.yorix.cz/cz/greenbono/gbo-aku.htm
# modbus protocol: https://www.yorix.cz/cz/download/GBO_modbus.zip

substitutions:
  friendly_name: Greenbono
  device_name: greenbono
  skip_updates_slow: "6"  #how many times to skip normal update for slow updating sensors

<<: !include common.yaml
<<: !include wifi-ufo8.yaml

esphome:
  name: $device_name
  on_boot:
    priority: -100
    then:
      - delay: 60s
      - lambda: |-
          // get local time and sync to controller
          time_t now = ::time(nullptr);
          struct tm *time_info = ::localtime(&now);
          int second = time_info->tm_sec;
          int minute = time_info->tm_min;
          int hour = time_info->tm_hour;
          int wday = time_info->tm_wday;
          int day = time_info->tm_mday;
          int month = time_info->tm_mon + 1;
          int year = time_info->tm_year % 100;
          esphome::modbus_controller::ModbusController *controller = id(greenbono);
          // if there is no internet connection localtime returns year 70
          if (year != 70)
          {
            // create the payload
            std::vector<uint16_t> rtc_data = {uint16_t((minute << 8) | second),
                                              uint16_t((wday << 8) | hour),
                                              0x0955,
                                              uint16_t((month << 8) | day),
                                              uint16_t(year)};
            // Create a modbus command item with the time information as the payload
            ESP_LOGI("ModbusLambda", "%02d:%02d:%02d %02d.%02d.%04d",
                    hour, minute, second, day, month, year + 2000);
            esphome::modbus_controller::ModbusCommandItem set_rtc_command =
                esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(
                    controller, 0x0, rtc_data.size(), rtc_data);
            controller->queue_command(set_rtc_command);
          }

esp8266:
  board: d1_mini_pro

logger:
  level: VERBOSE
  baud_rate: 0

uart:
  id: mod_bus
  tx_pin: GPIO01
  rx_pin: GPIO03
  baud_rate: 9600

modbus:
  id: modbus_greenbono

modbus_controller:
  - id: greenbono
    address: 0x01
    modbus_id: modbus_greenbono
    setup_priority: -10
    command_throttle: 50ms
    update_interval: 10s

sensor:
  - platform: wifi_signal
    name: $friendly_name Wifi RSSI
    update_interval: 60s

  - platform: modbus_controller
    id: last_valid_i1
    modbus_controller_id: greenbono
    name: ${friendly_name} LastValidI1
    address: 8
    unit_of_measurement: "A"
    device_class: current
    icon: mdi:flash
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: last_valid_u1
    name: ${friendly_name} LastValidU1
    address: 16
    unit_of_measurement: "V"
    device_class: voltage
    icon: mdi:flash
    register_type: read
    value_type: U_WORD

  - platform: template
    name: ${friendly_name} LastValidP1
    unit_of_measurement: "W"
    device_class: power
    icon: mdi:transmission-tower
    accuracy_decimals: 0
    lambda: |-
      return float(id(last_valid_i1).state * id(last_valid_u1).state * -1);
    update_interval: 10s

  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: ssr1
    name: ${friendly_name} SSR boiler
    address: 18
    unit_of_measurement: "%"
    icon: mdi:water-boiler
    register_type: read
    value_type: U_WORD
    bitmask: 0x00FF
    filters:
      - calibrate_linear:
        - 0 -> 0
        - 255 -> 300

  - platform: modbus_controller
    modbus_controller_id: greenbono
    name: ${friendly_name} PI Kp
    address: 30
    register_type: holding
    entity_category: diagnostic
    bitmask: 0x00FF
    skip_updates: $skip_updates_slow

  - platform: modbus_controller
    modbus_controller_id: greenbono
    name: ${friendly_name} PI Ki
    address: 30
    register_type: holding
    entity_category: diagnostic
    bitmask: 0xFF00
    skip_updates: $skip_updates_slow

  - platform: modbus_controller
    modbus_controller_id: greenbono
    name: ${friendly_name} Relay Config
    address: 60
    register_type: holding
    entity_category: diagnostic
    skip_updates: $skip_updates_slow

  - platform: modbus_controller
    modbus_controller_id: greenbono
    name: ${friendly_name} relay timeout switch off
    address: 72
    value_type: S_WORD
    register_type: holding
    entity_category: diagnostic
    bitmask: 0x00FF
    skip_updates: $skip_updates_slow

  - platform: modbus_controller
    modbus_controller_id: greenbono
    name: ${friendly_name} relay timeout switch on
    address: 72
    value_type: S_WORD
    register_type: holding
    entity_category: diagnostic
    bitmask: 0xFF00
    skip_updates: $skip_updates_slow

  - platform: modbus_controller
    modbus_controller_id: greenbono
    name: ${friendly_name} PI start level
    address: 74
    value_type: S_WORD
    register_type: holding
    entity_category: diagnostic
    bitmask: 0x00FF
    skip_updates: $skip_updates_slow

  - platform: modbus_controller
    modbus_controller_id: greenbono
    name: ${friendly_name} SSR Level For K1 On
    address: 108
    unit_of_measurement: "%"
    register_type: holding
    bitmask: 0x00FF
    skip_updates: $skip_updates_slow
    filters:
      - calibrate_linear:
        - 0 -> 0
        - 255 -> 200

  - platform: modbus_controller
    modbus_controller_id: greenbono
    name: ${friendly_name} SSR Level For K2 On
    address: 110
    unit_of_measurement: "%"
    register_type: holding
    bitmask: 0x00FF
    skip_updates: $skip_updates_slow
    filters:
      - calibrate_linear:
        - 0 -> 0
        - 255 -> 200

  - platform: modbus_controller
    modbus_controller_id: greenbono
    name: ${friendly_name} SSR Level For K3 On
    address: 112
    unit_of_measurement: "%"
    register_type: holding
    bitmask: 0x00FF
    skip_updates: $skip_updates_slow
    filters:
      - calibrate_linear:
        - 0 -> 0
        - 255 -> 200

binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: k1
    name: ${friendly_name} K1 Pool pump
    address: 10
    icon: mdi:pump
    register_type: holding
    bitmask: 0x0001

  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: k2
    name: ${friendly_name} K2 Pool heating
    address: 10
    icon: mdi:heat-pump
    register_type: holding
    bitmask: 0x0002

  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: k3
    name: ${friendly_name} K3 Relay Status
    register_type: holding
    address: 10
    bitmask: 0x0004

number:
  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: sh2starttime1hh24
    name: ${friendly_name} SH2 Start Time1 HH24
    address: 56
    use_write_multiple: true
    value_type: U_WORD
    min_value: 0
    max_value: 23
    lambda: |-
      int hour = data[0];
      int minute = data[1];
      return hour;
    write_lambda: |-
      ESP_LOGD("main","Modbus Number incoming value = %f",x);
      uint8_t hour = x;

      modbus_controller::ModbusController *controller = id(greenbono);
      modbus_controller::ModbusCommandItem set_payload_command =
          modbus_controller::ModbusCommandItem::create_write_multiple_command(
            controller, 56, 1, {uint16_t(hour << 8 | 0x00)});
      controller->queue_command(set_payload_command);

      // magic confirmation packet
      modbus_controller::ModbusCommandItem confirm =
          modbus_controller::ModbusCommandItem::create_write_multiple_command(
              controller, 76, 1, {uint16_t(0x55AA)});
      controller->queue_command(confirm);

      return {};
    skip_updates: $skip_updates_slow

  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: sh2stoptime1hh24
    name: ${friendly_name} SH2 Stop Time1 HH24
    address: 58
    use_write_multiple: true
    value_type: U_WORD
    min_value: 0
    max_value: 23
    lambda: |-
      int hour = data[0];
      int minute = data[1];
      return hour;
    write_lambda: |-
      ESP_LOGD("main","Modbus Number incoming value = %f",x);
      uint8_t hour = x;

      modbus_controller::ModbusController *controller = id(greenbono);
      modbus_controller::ModbusCommandItem set_payload_command =
          modbus_controller::ModbusCommandItem::create_write_multiple_command(
            controller, 58, 1, {uint16_t(hour << 8 | 0x00)});
      controller->queue_command(set_payload_command);

      // magic confirmation packet
      modbus_controller::ModbusCommandItem confirm =
          modbus_controller::ModbusCommandItem::create_write_multiple_command(
              controller, 76, 1, {uint16_t(0x55AA)});
      controller->queue_command(confirm);

      return {};
    skip_updates: $skip_updates_slow

switch:
  # SH2Timer is connected to K1 relay
  - platform: template
    name: ${friendly_name} Pool Pump always on
    lambda: |-
      if (id(sh2stoptime1hh24).state > 0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - number.set:
          id: sh2starttime1hh24
          value: 0
      - number.set:
          id: sh2stoptime1hh24
          value: 20
    turn_off_action:
      - number.set:
          id: sh2starttime1hh24
          value: 0
      - number.set:
          id: sh2stoptime1hh24
          value: 0

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: firmware_version
    name: ${friendly_name} EEfwVersion
    address: 34
    raw_encode: HEXBYTES
    register_type: holding
    lambda: |-
      char buffer[7];
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      snprintf(buffer, sizeof(buffer), "%01d.%03d", value/1000, value % 1000);
      return {buffer};
    skip_updates: $skip_updates_slow

  - platform: modbus_controller
    modbus_controller_id: greenbono
    name: ${friendly_name} SH2 start time 2 interval
    address: 56
    icon: mdi:clock-start
    register_type: holding
    lambda: |-
      int minute = data[1];
      int hour = data[0];
      if (hour != 255)
      {
        char buffer[8];
        snprintf(buffer, sizeof(buffer), "%02d:%02d", hour, minute);
        return {buffer};
      } else {
        return {"OFF"};
      }
    skip_updates: $skip_updates_slow

  - platform: modbus_controller
    modbus_controller_id: greenbono
    name: ${friendly_name} SH2 stop time 2 interval
    address: 58
    icon: mdi:clock-end
    register_type: holding
    lambda: |-
      int minute = data[1];
      int hour = data[0];
      if (hour != 255)
      {
        char buffer[8];
        snprintf(buffer, sizeof(buffer), "%02d:%02d", hour, minute);
        return {buffer};
      } else {
        return {"OFF"};
      }
    skip_updates: $skip_updates_slow
