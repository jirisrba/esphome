# GBO-Aku https://www.yorix.cz/cz/greenbono/gbo-aku.htm
# modbus protocol: https://www.yorix.cz/cz/download/GBO_modbus.zip

substitutions:
  friendly_name: Greenbono
  device_name: greenbono

<<: !include common.yaml

esphome:
  name: $device_name
  on_boot:
    priority: -100
    then:
      - delay: 1min
      - lambda: |-
          // get local time and sync to controller
          time_t now = ::time(nullptr);
          struct tm *time_info = ::localtime(&now);
          int seconds = time_info->tm_sec;
          int minutes = time_info->tm_min;
          int hour = time_info->tm_hour;
          int wday = time_info->tm_wday;
          int day = time_info->tm_mday;
          int month = time_info->tm_mon + 1;
          int year = time_info->tm_year % 100;
          esphome::modbus_controller::ModbusController *controller = id(greenbono);
          // if there is no internet connection localtime returns year 70
          if (year != 70)
          {
            // create the payload
            std::vector<uint16_t> rtc_data_time = {uint16_t((minutes << 8) | seconds), uint16_t((wday << 8) | hour)};
            std::vector<uint16_t> rtc_data_date = {uint16_t((month << 8) | day), uint16_t(year)};
            // Create a modbus command item with the time information as the payload
            ESP_LOGI("ModbusLambda", "%02d:%02d:%02d %02d.%02d.%04d",
                    hour, minutes, seconds, day, month, year + 2000);
            esphome::modbus_controller::ModbusCommandItem set_rtc_time_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(
                controller, 0x0, rtc_data_time.size(), rtc_data_time);
            controller->queue_command(set_rtc_time_command);
            esphome::modbus_controller::ModbusCommandItem set_rtc_date_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(
                controller, 6, rtc_data_date.size(), rtc_data_date);
            controller->queue_command(set_rtc_date_command);
          }

# esp8266:
#   board: d1_mini_pro

esp32:
  board: esp32doit-devkit-v1

logger:
  level: VERBOSE
  # hardware_uart: UART0_SWAP
  # baud_rate: 0

uart:
  id: mod_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 9600

modbus:
  id: modbus_greenbono

modbus_controller:
  - id: greenbono
    address: 0x01
    modbus_id: modbus_greenbono
    command_throttle: 100ms
    update_interval: 15s

sensor:
  - platform: wifi_signal
    name: $friendly_name Wifi RSSI
    update_interval: 60s

  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: last_valid_i1
    name: ${friendly_name} LastValidI1
    address: 8
    unit_of_measurement: "A"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: last_valid_u1
    name: ${friendly_name} LastValidU1
    address: 16
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: ssr1
    name: ${friendly_name} SSR1
    unit_of_measurement: "%"
    address: 18
    register_type: read
    value_type: U_WORD
    bitmask: 0x00FF
    accuracy_decimals: 0
    filters:
      - calibrate_linear:
        - 0 -> 0
        - 255 -> 100

  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: i_ssr1
    name: ${friendly_name} I_SSR1
    address: 26
    unit_of_measurement: "A"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: k1_relay_status
    name: ${friendly_name} K1 Relay Status
    register_type: holding
    address: 10
    bitmask: 0x0001

  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: k2_relay_status
    name: ${friendly_name} K2 Relay Status
    register_type: holding
    address: 10
    bitmask: 0x0002

  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: k3_relay_status
    name: ${friendly_name} K3 Relay Status
    register_type: holding
    address: 10
    bitmask: 0x0004

#   - platform: modbus_controller
#     modbus_controller_id: greenbono
#     id: k4_relay_status
#     name: ${friendly_name} K4 Relay Status
#     register_type: holding
#     address: 10
#     bitmask: 0x0008

#   - platform: modbus_controller
#     modbus_controller_id: greenbono
#     id: k5_relay_status
#     name: ${friendly_name} K5 Relay Status
#     register_type: holding
#     address: 10
#     bitmask: 0x0010

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: t_datetime
    name: ${friendly_name} t_datetime
    address: 0
    register_type: holding
    register_count: 5
    lambda: |-
      char buffer[20];
      snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d %02d.%02d.%04d",
        data[3], data[0], data[1], data[7], data[6], (data[8] << 8 | data[9]) + 2000);
      return {buffer};

  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: sh2starttime0
    name: ${friendly_name} SH2StartTime0
    address: 52
    register_type: holding
    lambda: |-
      char buffer[6];
      snprintf(buffer, sizeof(buffer), "%02d:%02d", data[1], data[0]);
      return {buffer};

  - platform: modbus_controller
    modbus_controller_id: greenbono
    id: sh2stoptime0
    name: ${friendly_name} SH2StopTime0
    address: 54
    register_type: holding
    lambda: |-
      char buffer[6];
      snprintf(buffer, sizeof(buffer), "%02d:%02d", data[1], data[0]);
      return {buffer};
