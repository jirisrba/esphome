# GBO-Aku https://www.yorix.cz/cz/greenbono/gbo-aku.htm
substitutions:
  device_name: invt-imars-mg5ktl
  friendly_name: INVT iMars MG5KTL
  skip_updates_slow: "6"  #how many times to skip normal update for slow updating sensors

<<: !include common.yaml
<<: !include wifi-ufo8.yaml

esphome:
  name: $device_name
  # on_boot:
  #   priority: -100
  #   then:
  #     # TODO set time on boot from home assistant
  #     # turn on auto mode at boot
  #     - lambda: |-
  #         ESP_LOGI("mode", "Mode set to manual active power limit");

  #         modbus_controller::ModbusController *controller = id(solar_inverter);
  #         std::vector<uint16_t> data = {0x2};
  #         esphome::modbus_controller::ModbusCommandItem command =
  #             esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x131F, data.size(), data);
  #         controller->queue_command(command);

esp32:
  board: esp32doit-devkit-v1

# esp8266:
#   board: d1_mini_pro

logger:
  level: VERY_VERBOSE
  # hardware_uart: UART0_SWAP
  # Don't write log messages to UART0 (GPIO1/GPIO3) if the inverter is connected to GPIO1/GPIO3
  # baud_rate: 0

web_server:
  port: 80

uart:
  id: mod_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 9600
  stop_bits: 1

modbus:
  id: modbus_inverter

modbus_controller:
  - id: solar_inverter
    address: 0x01
    modbus_id: modbus_inverter
    setup_priority: -10
    update_interval: 15s

sensor:
  - platform: wifi_signal
    name: ${device_name} Wifi RSSI
    update_interval: 60s

  # - platform: modbus_controller
  #   modbus_controller_id: solar_inverter
  #   id: inverter_power_limit
  #   name: ${device_name} Active Power Limit
  #   address: 0x131E
  #   unit_of_measurement: "%"
  #   register_type: holding
  #   value_type: U_WORD
  #   filters:
  #     - multiply: 0.01

  # - platform: modbus_controller
  #   modbus_controller_id: solar_inverter
  #   id: pv1_voltage
  #   name: ${device_name} PV1 voltage
  #   address: 0x1690
  #   unit_of_measurement: "V"
  #   register_type: holding
  #   value_type: U_WORD
  #   accuracy_decimals: 0
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: solar_inverter
  #   id: pv1_current1
  #   name: ${device_name} PV1 current
  #   address: 0x1691
  #   unit_of_measurement: "A"
  #   register_type: holding
  #   value_type: U_WORD
  #   accuracy_decimals: 1
    # filters:
    #   - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: solar_inverter
  #   id: pv2_voltage
  #   name: ${device_name} PV2 voltage
  #   address: 0x1692
  #   unit_of_measurement: "V"
  #   register_type: holding
  #   value_type: U_WORD
  #   accuracy_decimals: 0

  # - platform: modbus_controller
  #   modbus_controller_id: solar_inverter
  #   id: pv2_current
  #   name: ${device_name} PV2 current
  #   address: 0x1693
  #   unit_of_measurement: "A"
  #   register_type: holding
  #   value_type: U_WORD
  #   accuracy_decimals: 1

  # - platform: modbus_controller
  #   modbus_controller_id: solar_inverter
  #   id: frequency
  #   name: ${device_name} Grid frequency
  #   address: 0x16A0
  #   unit_of_measurement: "Hz"
  #   register_type: holding
  #   value_type: U_WORD
  #   accuracy_decimals: 1
  #   skip_updates: $skip_updates_slow

  # - platform: modbus_controller
  #   modbus_controller_id: solar_inverter
  #   id: power_factor
  #   name: "${device_name} Power factor"
  #   address: 0x16A1
  #   unit_of_measurement: ""
  #   register_type: holding
  #   value_type: U_WORD
  #   accuracy_decimals: 0

  # - platform: modbus_controller
  #   modbus_controller_id: solar_inverter
  #   id: pv_power
  #   name: "${device_name} PV Power"
  #   address: 0x16A2
  #   unit_of_measurement: "kW"
  #   register_type: holding
  #   value_type: FP32
  #   device_class: power
  #   accuracy_decimals: 1

  # - platform: modbus_controller
  #   modbus_controller_id: solar_inverter
  #   id: ac_output_power
  #   name: "${device_name} AC output power"
  #   address: 0x16A4
  #   unit_of_measurement: "kW"
  #   register_type: holding
  #   value_type: FP32
  #   device_class: power
  #   accuracy_decimals: 1

  # - platform: modbus_controller
  #   id: temperature
  #   name: "${device_name} Temperature"
  #   address: 0x16A6
  #   register_type: holding
  #   unit_of_measurement: Â°C
  #   device_class: temperature
  #   entity_category: diagnostic
  #   icon: mdi:thermometer
  #   value_type: U_WORD
  #   filters:
  #     - multiply: 0.01

  # - platform: modbus_controller
  #   modbus_controller_id: solar_inverter
  #   id: energy_production_today
  #   name: "${device_name} Energy total today"
  #   address: 0x1616
  #   register_type: holding
  #   value_type: FP32
  #   unit_of_measurement: kWh
  #   device_class: energy
  #   accuracy_decimals: 1

# [16:47:30][V][modbus:042]: Modbus received Byte  0 (0X0)
# [16:47:30][V][modbus:042]: Modbus received Byte  5 (0X5)
# [16:47:30][V][modbus:042]: Modbus received Byte  68 (0X44)
# [16:47:30][V][modbus:042]: Modbus received Byte  116 (0X74)

  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: total_energy_production
    name: "${device_name} Energy total"
    address: 0x1652
    register_type: holding
    unit_of_measurement: kWh
    value_type: U_DWORD
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 1
    skip_updates: $skip_updates_slow
    filters:
      - multiply: 0.01


# text_sensor:
#   - platform: modbus_controller
#     modbus_controller_id: solar_inverter
#     id: state
#     name: $device_name operational state
#     address: 0x167C
#     register_type: holding
#     raw_encode: HEXBYTES
#     lambda: |-
#       uint16_t value = modbus_controller::word_from_hex_str(x, 0);
#       switch (value) {
#         case 1: return std::string("self-inspection");
#         case 2: return std::string("running");
#         case 3: return std::string("warning");
#         case 4: return std::string("fault");
#         case 5: return std::string("manual stop");
#       }
#       return std::string("Unknown");
