# INVT IMARS MG5KTL - Single-Phase Grid Inverter 5kW with 2 MPPT

substitutions:
  device_name: inverter #name for all sensors in Home assistant
  friendly_name: INVT iMars MG5KTL
  skip_updates_slow: "6"  #how many times to skip normal update for slow updating sensors

<<: !include common.yaml
<<: !include wifi-ufo8.yaml

esphome:
  name: $device_name
  on_boot:
    priority: -100
    then:
      - lambda: |-
          // get local time and sync to inverter RTC
          time_t now = ::time(nullptr);
          struct tm *time_info = ::localtime(&now);
          int second = time_info->tm_sec;
          int minute = time_info->tm_min;
          int hour = time_info->tm_hour;
          int wday = time_info->tm_wday;
          int day = time_info->tm_mday;
          int month = time_info->tm_mon + 1;
          int year = time_info->tm_year % 100;
          esphome::modbus_controller::ModbusController *controller = id(solar_inverter);
          // if there is no internet connection localtime returns year 70
          if (year != 70)
          {
            // create the payload
            std::vector<uint16_t> rtc_data = {uint16_t(year << 8 | month),
                                              uint16_t(day << 8 | 0x00),
                                              uint16_t((hour << 8) | minute),
                                              uint16_t((second << 8) | wday)
                                              };
            // Create a modbus command item with the time information as the payload
            ESP_LOGI("ModbusLambda", "%02d:%02d:%02d %02d.%02d.%04d",
                    hour, minute, second, day, month, year + 2000);
            esphome::modbus_controller::ModbusCommandItem set_rtc_command =
                esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(
                    controller, 0x1678, rtc_data.size(), rtc_data);
            controller->queue_command(set_rtc_command);
          }

esp8266:
  board: d1_mini_pro

logger:
  # level: VERBOSE
  baud_rate: 0

uart:
  id: mod_bus
  tx_pin: GPIO01
  rx_pin: GPIO03
  baud_rate: 9600

modbus:
  id: modbus_inverter

modbus_controller:
  - id: solar_inverter
    address: 0x01
    modbus_id: modbus_inverter
    setup_priority: -10
    update_interval: 10s

sensor:
  - platform: wifi_signal
    name: ${device_name} Wifi RSSI
    update_interval: 60s

  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: pv1_voltage
    name: ${device_name} PV1 voltage
    address: 0x1690
    unit_of_measurement: "V"
    register_type: holding
    value_type: U_WORD
    device_class: voltage
    icon: mdi:flash
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: pv1_current
    name: ${device_name} PV1 current
    address: 0x1691
    unit_of_measurement: "A"
    register_type: holding
    value_type: U_WORD
    device_class: current
    icon: mdi:flash
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: grid_voltage
    name: "${device_name} Grid voltage"
    address: 0x1698
    unit_of_measurement: "V"
    register_type: holding
    value_type: U_WORD
    device_class: voltage
    icon: mdi:flash
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: grid_current
    name: "${device_name} Grid current"
    address: 0x1699
    unit_of_measurement: "A"
    register_type: holding
    value_type: U_WORD
    device_class: current
    icon: mdi:flash
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: grid_frequency
    name: ${device_name} Grid frequency
    address: 0x16A0
    unit_of_measurement: "Hz"
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.01
    skip_updates: $skip_updates_slow

  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: power_factor
    name: "${device_name} Power factor"
    address: 0x16A1
    unit_of_measurement: ""
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.001

  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: pv_power
    name: "${device_name} PV Power"
    address: 0x16A2
    unit_of_measurement: "W"
    device_class: power
    icon: mdi:solar-power-variant
    register_type: holding
    value_type: U_DWORD

  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: power
    name: "${device_name} Power"
    address: 0x16A4
    register_type: holding
    unit_of_measurement: "W"
    device_class: power
    icon: mdi:solar-power
    value_type: U_DWORD
    accuracy_decimals: 0

  - platform: modbus_controller
    id: temperature
    name: "${device_name} Temperature"
    address: 0x16A6
    register_type: holding
    unit_of_measurement: Â°C
    device_class: temperature
    entity_category: diagnostic
    icon: mdi:thermometer
    value_type: U_WORD
    filters:
      - multiply: 0.01
    skip_updates: $skip_updates_slow

  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: energy_today
    name: "${device_name} Energy today"
    address: 0x1616
    register_type: holding
    value_type: U_DWORD
    unit_of_measurement: kWh
    device_class: energy
    icon: mdi:solar-power
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    skip_updates: $skip_updates_slow

  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: total_energy_production
    name: "${device_name} Total energy production"
    address: 0x1652
    register_type: holding
    unit_of_measurement: kWh
    state_class: total_increasing
    device_class: energy
    icon: mdi:solar-power
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.01
    skip_updates: $skip_updates_slow

button:
  - platform: template
    name: ${device_name} start
    on_press:
      then:
        - lambda: |-
            modbus_controller::ModbusController *controller = id(solar_inverter);
            modbus_controller::ModbusCommandItem start =
                modbus_controller::ModbusCommandItem::create_write_multiple_command(
                    controller, 0x1400, 1, {uint16_t(0x5555)});
            controller->queue_command(start);

  - platform: template
    name: ${device_name} stop
    on_press:
      then:
        - lambda: |-
            modbus_controller::ModbusController *controller = id(solar_inverter);
            modbus_controller::ModbusCommandItem stop =
                modbus_controller::ModbusCommandItem::create_write_multiple_command(
                    controller, 0x1400, 1, {uint16_t(0xAAAA)});
            controller->queue_command(stop);

  - platform: template
    name: ${device_name} reset
    on_press:
      then:
        - lambda: |-
            modbus_controller::ModbusController *controller = id(solar_inverter);
            modbus_controller::ModbusCommandItem stop =
                modbus_controller::ModbusCommandItem::create_write_multiple_command(
                    controller, 0x1401, 1, {uint16_t(0xAAAA)});
            controller->queue_command(stop);

number:
  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: active_power_limit
    name: ${device_name} Active Power Limit
    address: 0x131E
    min_value: 500
    max_value: 3600
    step: 100
    use_write_multiple: true
    # maximum power limit 5000 W = 100% = 10000 registry value
    multiply: 2.0
    # lambda: "return  x * 2.0; "

# select:
#   - platform: modbus_controller
#     modbus_controller_id: solar_inverter
#     id: active_power_limit
#     name: ${device_name} Active Power Limit
#     address: 0x131E
#     value_type: U_WORD
#     use_write_multiple: true
#     # maximum power limit 5000 W = 100% = 10000 registry value
#     optionsmap:
#       "5000": 10000
#       "3600": 7200
#       "2400": 4800
#       "1800": 3600
#       "800": 1600
#       "500": 1000
#     lambda:
#       ESP_LOGD("active_power_limit", "Power Limit %lld", x);
#       return to_string(x / 2);

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: fault_code
    name: $device_name Fault code
    address: 0x1670
    register_type: holding
    icon: mdi:eye
    entity_category: diagnostic
    raw_encode: HEXBYTES

  - platform: modbus_controller
    modbus_controller_id: solar_inverter
    id: state
    name: $device_name operational state
    address: 0x167C
    register_type: holding
    icon: mdi:eye
    entity_category: diagnostic
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      ESP_LOGD("operational state value: ", "%d", value);
      switch (value) {
        case 1: return std::string("self-inspection");
        case 2: return std::string("running");
        case 3: return std::string("warning");
        case 4: return std::string("fault");
        case 5: return std::string("manual stop");
      }
      return to_string(value);
